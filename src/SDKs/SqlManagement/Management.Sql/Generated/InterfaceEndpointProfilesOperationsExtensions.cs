// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InterfaceEndpointProfilesOperations.
    /// </summary>
    public static partial class InterfaceEndpointProfilesOperationsExtensions
    {
            /// <summary>
            /// Gets a interface endpoint profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// The name of the interface endpoint profile.
            /// </param>
            public static InterfaceEndpointProfile Get(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName)
            {
                return operations.GetAsync(resourceGroupName, serverName, interfaceEndpointProfileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a interface endpoint profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// The name of the interface endpoint profile.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InterfaceEndpointProfile> GetAsync(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serverName, interfaceEndpointProfileName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a interface endpoint profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static InterfaceEndpointProfile CreateOrUpdate(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName, InterfaceEndpointProfile parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serverName, interfaceEndpointProfileName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a interface endpoint profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InterfaceEndpointProfile> CreateOrUpdateAsync(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName, InterfaceEndpointProfile parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverName, interfaceEndpointProfileName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the interface endpoint profile with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// </param>
            public static void Delete(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName)
            {
                operations.DeleteAsync(resourceGroupName, serverName, interfaceEndpointProfileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the interface endpoint profile with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serverName, interfaceEndpointProfileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of interface endpoint profiles attached to a server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            public static IPage<InterfaceEndpointProfile> ListByServer(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName)
            {
                return operations.ListByServerAsync(resourceGroupName, serverName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of interface endpoint profiles attached to a server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InterfaceEndpointProfile>> ListByServerAsync(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServerWithHttpMessagesAsync(resourceGroupName, serverName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a interface endpoint profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static InterfaceEndpointProfile BeginCreateOrUpdate(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName, InterfaceEndpointProfile parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, serverName, interfaceEndpointProfileName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a interface endpoint profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InterfaceEndpointProfile> BeginCreateOrUpdateAsync(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName, InterfaceEndpointProfile parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverName, interfaceEndpointProfileName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the interface endpoint profile with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// </param>
            public static void BeginDelete(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName)
            {
                operations.BeginDeleteAsync(resourceGroupName, serverName, interfaceEndpointProfileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the interface endpoint profile with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='interfaceEndpointProfileName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IInterfaceEndpointProfilesOperations operations, string resourceGroupName, string serverName, string interfaceEndpointProfileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, serverName, interfaceEndpointProfileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of interface endpoint profiles attached to a server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<InterfaceEndpointProfile> ListByServerNext(this IInterfaceEndpointProfilesOperations operations, string nextPageLink)
            {
                return operations.ListByServerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of interface endpoint profiles attached to a server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InterfaceEndpointProfile>> ListByServerNextAsync(this IInterfaceEndpointProfilesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
